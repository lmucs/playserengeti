<!DOCTYPE sqlMap
   PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN"
   "http://www.ibatis.com/dtd/sql-map-2.dtd">
<sqlMap namespace="User">

  <resultMap class="com.playserengeti.domain.User" id="userMap">
    <result property="id" column="player_id"/>
    <result property="email" column="player_email"/>
    <result property="firstName" column="player_first_name"/>
    <result property="lastName" column="player_last_name"/>
    <result property="dateCreated" column="player_creation_timestamp"/>
    <result property="avatarFileSuffix" column="player_avatar_file_suffix"/>
  </resultMap>

  <insert id="insertUserWithPassword">
    INSERT
    INTO player (
        player_email,
        player_first_name,
        player_last_name,
        player_password_hash,
        player_avatar_file_suffix)
    VALUES (
        #user.email#,
        #user.firstName#,
        #user.lastName#,
        md5(#password#),
        #user.avatarFileSuffix#)
    <selectKey keyProperty="user.id" resultClass="int">
      SELECT currval('player_id_seq')
    </selectKey>
  </insert>
  
  <update id="updateUser">
    UPDATE player
    SET
        player_email = #email#,
        player_first_name = #firstName#,
        player_last_name = #lastName#
    WHERE player_id = #id#
  </update>
  
  <update id="updateUserPassword">
    UPDATE player
    SET
        player_password_hash = md5(#password#)
    WHERE player_id = #id#
  </update>
  
  <delete id="deleteUser">
    DELETE FROM player
    WHERE player_id = #value#
  </delete>

  <select id="getAllUsers" resultMap="userMap">
    SELECT
        *
    FROM player
  </select>

  <select id="getUserById" resultMap="userMap">
    SELECT
        *
    FROM player
    WHERE player_id = #value#
  </select>
  
  <select id="getUserByEmail" resultMap="userMap">
    SELECT
        *
    FROM player
    WHERE player_email = #value#
  </select>
  
  <select id="authenticateUserByEmailAndPassword" resultMap="userMap">
    SELECT
        *
    FROM player
    WHERE player_email = #email# and player_password_hash = md5(#password#)
  </select>
  
  <select id="getFriends" resultMap="userMap">
      SELECT * 
      FROM player, friendship 
      WHERE ((#value# = first_id AND player_id = second_id) 
                OR (#value# = second_id AND player_id = first_id)) 
            AND (status = 'accepted')
  </select>

  <select id="getFriendInvites" resultMap="userMap">
      SELECT *
      FROM player, friendship 
      WHERE #value# = second_id 
        AND player_id = first_id 
        AND status = 'pending'
  </select>
  
  <select id="getNewestUsers" resultMap="userMap">
      SELECT * 
      FROM player
      ORDER BY now() - player_creation_timestamp
      LIMIT 10
  </select>
  
  <select id="getMostActiveUsers" resultMap="userMap">
      SELECT *
      FROM player, (
        SELECT COUNT(visit_id), visit_user_id
        FROM visit
        GROUP BY visit_user_id) temp
      WHERE player_id = temp.visit_user_id
      ORDER BY count DESC
      LIMIT 10
  </select>
  
  <update id="acceptFriendInvite">
      UPDATE friendship
      SET status = 'accepted'
      WHERE #firstId# = first_id 
        AND #secondId# = second_id
  </update>
  
  <update id="rejectFriendInvite">
      UPDATE friendship
      SET status = 'rejected'
      WHERE #firstId# = first_id 
        AND #secondId# = second_id 
  </update>
  
  <insert id="sendFriendInvite">
      INSERT
      INTO friendship (first_id, second_id, status)
      VALUES (#firstId#, #secondId#, 'pending')      
  </insert>
  
  <delete id="removeFriend">
      DELETE
      FROM friendship
      WHERE (first_id = #firstId# AND second_id = #secondId#) OR 
        (first_id = #secondId# AND second_id = #firstId#)
  </delete>
  
  <select id="searchUsers" resultMap="userMap">
      SELECT *
      FROM player
      WHERE LOWER(player_first_name) LIKE '%' || LOWER(#value#) || '%'
        OR LOWER(player_last_name) LIKE '%' || LOWER(#value#) || '%'
      LIMIT 10
  </select>
  
</sqlMap>