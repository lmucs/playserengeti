#summary List of primary use cases

==User==
----
===U1 Sign Up User===

  * *Description*: An end user registers as a new player.
  * *Actor*: End user.
  * *Preconditions*: None.
  * *Flow of Events for Main Scenario*:
    # User sends email address and desired password to system.
    # The system validates the inputs and, if acceptable, creates a new player.
  * *Alternative Scenarios*:
    # If the email address is invalid or already exists, or the password is missing, the action is cancelled. 
  * *Postconditions*: A new player record has been inserted into the database.
  * *Handles Requirements*: 1, 2.6.

===U2 Delete User===

  * *Description*: A user deletes their own account.
  * *Actor*: End user
  * *Preconditions*: The user is already registered as a player.
  * *Flow of Events for Main Scenario*:
    # User attempts to delete account.
    # System sends user warning of attempted account deletion and asks for confirmation
    # If the user confirms, their player account is deleted and they are taken to the home page.
  * *Alternative Scenarios*:
    # If the user is a team leader, their team is deleted from the database as well.
  * *Postconditions*: The user's player record is removed from the database.
  * *Handles Requirements*: 

<wiki:comment>

URI: /user/delete[?user=user_id]  The GET parameter is optional, is only available to admins, and if it is not supplied then the controller knows to delete the currently logged in user.
Users: Self, Admin
Security:
Notes:

</wiki:comment>

===U3 Manage User===

  * *Description*: A user modifies their profile.
  * *Actor*: End user
  * *Preconditions*: The user is already registered as a player.
  * *Flow of Events for Main Scenario*:
    # User sends new password, first name, and last name to system.
    # System changes password, first name, and last name as directed
  * *Alternative Scenarios*:
    # If no new password is provided, an error alert is sent to the user, directing them to enter a new password.
  * *Postconditions*: The first name, last name, and password in the user's player record are replaced.
  * *Handles Requirements*: 

<wiki:comment>

Description: Manage a user's data.  This data includes the user's password and associated teams, along with profile data, including name, email, etc.
URI: /user/manage[?user=user_id]  The GET parameter is optional, is only available to admins, and if it is not supplied then controller knows to manage the currently logged in user.
Users: Self, Admin
Security:
Notes:

</wiki:comment>

===U4 View User Profile===

  * *Description*: A user views the profile of a user.
  * *Actor*: End user
  * *Preconditions*: The user is already registered as a player.
  * *Flow of Events for Main Scenario*:
    # User sends user id of a user to the system.
    # System displays profile of user associated with sent user id.
  * *Alternative Scenarios*:
    # If the user views their own profile, they are able to modify it or check in from it.
  * *Postconditions*: None.
  * *Handles Requirements*: 

<wiki:comment>

Description: Displays the profile of the specified user.
URI: /user/viewprofile[?user=user_id]  The GET parameter is optional, and if not supplied the controller displays the currently logged-in user's profile.
Users: User, Admin
Security:
Notes:

</wiki:comment>
==Team==
----
===U5 Create Team===

  * *Description*: A user creates a team as a team leader.
  * *Actor*: End user
  * *Preconditions*: The user is already registered as a player.
  * *Flow of Events for Main Scenario*:
    # Not yet implemented in web interface.
  * *Alternative Scenarios*:
    # TO_DO
  * *Postconditions*: 
  * *Handles Requirements*: 

<wiki:comment>
Description: Create a team.

URI: /team/create

Users: User

Security:

Notes:
</wiki:comment>
===U6 Delete Team===

  * *Description*: A team leader deletes a team that they lead.
  * *Actor*: Team leader user.
  * *Preconditions*: The user is already registered as a player and is the leader of a team.
  * *Flow of Events for Main Scenario*:
    # TO_DO
  * *Alternative Scenarios*:
    # TO_DO
  * *Postconditions*: 
  * *Handles Requirements*: 

<wiki:comment> 

Description: A team leader deletes one of their teams.

URI: /team/delete?team=team_id

Users: Team Lead, Admin

Security:

Notes: Where do we define Team Lead role?  It should be specified in the team's profile page.  Parameter?
</wiki:comment>

===Manage Team Hierarchy===

DON'T KNOW IF THIS USE CASE REALLY BELONGS UNDER TEAM

Description: Used to manage the hierarchy of created teams.

URI: /team/manage

Users: Admin

Security:

Notes: We need to determine what exactly will determine the hierarchy on a global scale. Suggestions for [[Team Hierarchy Rules & Definition]].

===Get Team Profile===

Description: Display a team's profile.

URI: /team/getprofile?team=team_id

Users: Anyone

Security:

Notes:

==Business/Location==
----

Question: is a business different than a location? How do we define each? [[User:Gratrixl|Gratrixl]] 22:39, 8 September 2009 (UTC)

Answer(somewhat)/Expanding on Question: They should probably be considered different entities.  That way, we can include things like a local park or monument that will not actually have business deals but still be a place to control.  Or we could just keep them the same and never allow those locations to have deals/offers.--[[User:Cmueller|Cmueller]] 00:00, 9 September 2009 (UTC)

My vote is to separate them. Let locations be user-submitted content, but businesses by validated somehow. [[User:Gratrixl|Gratrixl]] 06:16, 9 September 2009 (UTC)

===Create Location/Business===

Description: Create a business profile.

URI: /biz/create

Users: User (business representative), Admin

Security:

Notes: Separate Location from Business?

===Delete Location/Business===

Description:

URI: /biz/delete?biz=business_id

Users: User (business representative), Admin

Security:

Notes: Separate Location from Business? If a location is different than a business, who is a location owner?[[User:Gratrixl|Gratrixl]] 23:04, 8 September 2009 (UTC)

===Manage Location/Business===

Description: Manage the business's profile.

URI: /biz/manage

Users: User (business representative), Admin

Security:

Notes: Separate Location from Business?

===Add Location===

Description: Add a location to a business.

URI: /biz/loc/add?biz=business_id

Users: User (business representative), Admin

Security:

Notes: Define how this differs from create business

===Remove Location===

Description: Remove a location of a business.

URI: /biz/loc/remove?biz=business_id&loc=location_id

Users: User (business representative), Admin

Security:

Notes:

==Status==
----

===Ping===

Description: Send notification of (lat/long) of a user to database.

URI: /status/ping?lat=number&long=number

Users: Self

Security:

Notes:Internal case not directly accessible by user (See show below)

===Show===

Description: Show yourself.  This action triggers a ping immediately, and then additional pings at specific time intervals.

URI: /status/show

Users: Self

Security:

Notes:

===Hide===

Description: Hide yourself.  This action disables the intermittent pings.

URI: /status/hide

Users: Self, Admin

Security:

Notes:

===View World Map===

Description: Display the current status of the game. 

URL: /status/game?league=league_id&rivalsOnly=showOnlyRivals

Users: User

Security: 

Notes: Parameters for the game status should be defined once the team hierarchy issues have been hashed out, but should likely include which league/sub-league you want to show status for and if you want to show all teams in that league or just your team and their rivals.

==Communication==
----

===Invite To Game===

Description: Invite a person to Play Serengeti!!!!

URL: /invite/game

Users: User

Security:

Notes: How does this work? Does the form ask for an email address and send a link to that address?

===Invite To be Friend===
Description: Invite a person to be your friend

URI: /invite/friend

Users: User

Security:

Notes:

===Accept Friend Request===
Description: Accept a request to be a friend

URI: /invite/accept

Users: Users who have received a friend request

Security:

Notes:

===Invite To Team===

Description: Invite a user (or soon-to-be-user) to a team

URL: /invite/team

Users: Team Member

Security:

Notes: Does this assume a person is already signed up for the game? or is this a special version of invite to game? Or Both? If Both, do we need two versions?[[User:Gratrixl|Gratrixl]] 17:47, 10 September 2009 (UTC)

===Invite To Location (subset of message user)===

Description: Invite a person to a location

URL: /message/location

Users: User

Security: Should be limited to users friends/team members

Notes: could this be something like and "event" in facebook, where you can set it up in advance? If so, then this really isn't a subset of message user. Perhaps we add (eventually) an "event" function?[[User:Gratrixl|Gratrixl]] 17:47, 10 September 2009 (UTC)

===Message User===

Description: Send a user a message

URL: /message/user

Users: User

Security: Should be limited to users friends/team members

Notes:

==Query==
----

===Find Locations of Businesses===

Description: Find locations of businesses.

URI: /find/biz?q=term[&lat=number&lon=number] -- The latitude and longitude GET parameters are optional.  If they're omitted then locations of businesses near the user's current position are returned.

Users: User

Security:

Notes: Other parameters may be possible.  Including radius around lat/long that business can be located in, category of business, how many results to return, etc.

===Find User===

Description: Find a user.

URI: /find/user?...

Users: User

Security:

Notes: Parameters can allow users to be found by name, email address, screename, etc.

===Find Team===

Description: Find a team.

URI: /search/team?...

Users: User

Security:

Notes: Parameters can allow teams to be found by name, location, parent team, etc.