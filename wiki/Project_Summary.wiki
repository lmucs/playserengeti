#labels Featured,Phase-Design
=== Short Description ===

Serengeti is a social networking application and game where players join teams that compete for "ownership" of locations (businesses, parks, beaches, and so on) by recording their visits to these locations. Visits are recorded by "checking in" via a mobile browser or iPhone app. Players can track their teams' conquests through the playserengeti website. 

=== Narrative Description ===

Serengeti is a location-aware, social networking application and game where participants join teams, record visits to real world locations (beaches, parks, business establishments), and assist their team in "taking ownership" of locations. Users can be part of multiple teams, but their visits can only be attributed to one team of the user's choice at a time. To record visits, users _check in_ at their location, either by a web application accessible to mobile devices or a specially developed application for major mobile platforms, such as the iPhone. Points for a location and team are given for each visit, and the team with the highest point total for a location is considered the "owner" of the location.

Teams can get a more in-depth look at their teams' standings on the `playserengeti` website. Team statistics can be viewed along with a Google Maps interface pointing out the locations a team currently owns.

Locations can offer benefits to their current "owner" team, such as a discount, if they wish to do so.  Teams can also set up small competitions between themselves, offering a prize to a team based upon a set of rules specified at the creation of the competition.  Competitions can even be organized to support charitable organizations.  Serengeti can even be used just to find out where your friends might be.

The project was developed by a team of seven students from the LMU course CMSI 401 Software Engineering Laboratory during the fall, 2009 semester.  It consists of a Java web application written in Java, !JavaScript, and JSP (with JSTL), using the Spring, iBATIS, and Tiles framework, along with log4j, JQuery, Google APIs for mapping and geocoding, 960, and a number of other Java and !JavaScript technologies and third-party solutions.  The webapp controllers were designed to deliver JSP, XML, and JSON.  Uris were kept clean with !UrlRewite.  JUnit (of course) was used for testing. The students set up and configured a publicly accessible machine running Tomcat 6 and a Postgres database server.  The students used maven for the build environment, and Subversion for version control, hosting the project at Google Code.  An iPhone app was developed in Objective C.

For more information about the class, especially the lectures on software engineering, software construction, and relevant technologies, as well as summaries from the industry guest speakers that presented valuable information about their companies and the state of the industry to the students (and made connections on !LinkedIn) see the [Meeting_Notes meeting notes].