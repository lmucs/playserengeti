#summary IN PROGRESS

==Domain Classes==

==Controllers and URIs==

==Services==

Services implement the majority of the business logic in our web application.  They interface with the underlying data storage via data access objects, and are interfaced with primarily by controllers and other services.  Serengeti's service classes are: UserService, TeamService, LocationService and VisitService.  The categories of functionality provided by each service is evident in their names.
  _-Loren Abrams_

==DAOs==


Data access objects provide a relatively primitive abstraction layer to the underlying data stores.  They provide methods that more or less query the data store and map the results directly to domain objects (objects that represent entities in the application) without any business processing.  The methods of the DAOs are declared in interfaces so that they may be separately implemented for various styles of data storage.  We've implemented two sets of DAOs.  One set for mock data (data that's declared directly as data structures in the application code for testing purposes), and another set with IBATIS object-relational mappings, which map the results of SQL queries on a relational database to domain objects.

The DAO interfaces Serengeti utilizes are: [http://code.google.com/p/playserengeti/source/browse/trunk/serengeti/src/main/java/com/playserengeti/dao/FriendshipDao FriendshipDao], LocationDao, MembershipDao, UserDao, TeamDao and VisitDao.  FriendshipDao provides methods to query friendship relationships between users.  MembershipDao provides methods for querying relationships between users and teams.  VisitDao provides methods for querying visits by users at locations for a specific team.  The purposes of the other DAOs are relatively self-explanatory by their names.
  _-Loren Abrams_

<wiki:comment>
To contain:
  * List of domain classes
    * Include UML diagram
  * List of controllers and URIs
  * List of services
  * List of daos
</wiki:comment>